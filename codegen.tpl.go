package fastbin

var appTemplate = `
//
// THIS FILE IS GENERATED BY fastbin
// DO NOT MODIFY BY MANUAL
//
package {{Package}}

import "github.com/xxoommd/binary"

{{range .Imports}}
import "{{.}}"
{{end}}

{{range .Types}}
	{{template "Struct" .}}
{{end}}

{{define "Struct"}}

func (obj *{{.Type.Name}}) MarshalBinary() (data []byte, err error) {
	var buf = binary.Buffer{Data: make([]byte, obj.BinarySize())}
	obj.MarshalWriter(&buf)
	return buf.Data, nil
}

func (obj *{{.Type.Name}}) UnmarshalBinary(data []byte) error {
	obj.UnmarshalPacket(data)
	return nil
}

func (obj *{{.Type.Name}}) MarshalPacket(p []byte) {
	var buf = binary.Buffer{Data: p}
	obj.MarshalWriter(&buf)
}

func (obj *{{.Type.Name}}) UnmarshalPacket(p []byte) {
	var buf = binary.Buffer{Data: p}
	obj.UnmarshalReader(&buf)
}

func (obj *{{.Type.Name}}) BinarySize() (n int) {
	n = ` + line(`
	{{range Fields .Type}}
		{{if IsFixedSize .Type}}
			{{template "FixedSize" ToType .}}
		{{end}}
	{{end}}0`) + `
	{{range Fields .Type}}
		{{if not (IsFixedSize .Type)}}
			{{template "UnfixedSize" (NewTplType3 (printf "obj.%s" .Name) . -1)}}
		{{end}}
	{{end}}
	return n
}

func (obj *{{.Type.Name}}) MarshalWriter(w binary.BinaryWriter) {
	{{range Fields .Type}}
		{{template "Marshal" (NewTplType3 (printf "obj.%s" .Name) . -1)}}
	{{end}}
}

func (obj *{{.Type.Name}}) UnmarshalReader(r binary.BinaryReader) {
	{{range Fields .Type}}
		{{template "Unmarshal" (NewTplType3 (printf "obj.%s" .Name) . -1)}}
	{{end}}
}

{{end}}

` + line(`
{{define "FixedSize"}}
	{{FixedSize .}} +
{{end}}
`) + `

{{define "UnfixedSize"}}
	{{if .IsArray}}
		for {{.I}} := 0; {{.I}} < len({{.Name}}); {{.I}}++ {
			{{template "UnfixedSize" .Elem}}
		}
	{{else if .IsSlice}}
		n += 2
		{{if .Elem.IsFixedSize}}
			n += len({{.Name}}) * {{.Elem.FixedSize}}
		{{else}}
			for {{.I}} := 0; {{.I}} < len({{.Name}}); {{.I}}++ {
				{{template "UnfixedSize" .Elem}}
			}
		{{end}}
	{{else if .IsPtr}}
		n += 1
		if {{.Name}} != nil {
			{{if .Elem.IsFixedSize}}
				n += {{.Elem.FixedSize}}
			{{else}}
				{{template "UnfixedSize" .Elem}}
			{{end}}
		}
	{{else if .IsMap}}
		n += 2
		{{if and (IsFixedSize .Type.Key) (.Elem.IsFixedSize)}}
			n += len({{.Name}}) * ({{FixedSize .Type.Key}} + {{.Elem.FixedSize}})
		{{else}}
			{{if and (not (IsFixedSize .Type.Key)) (.Elem.IsFixedSize)}}
				for {{.K}}, _ := range {{.Name}} {
			{{else if and (IsFixedSize .Type.Key) (not (.Elem.IsFixedSize))}}
				for _, {{.V}} := range {{.Name}} {
			{{else}}
				for {{.K}}, {{.V}} := range {{.Name}} {
			{{end}}
					{{if IsFixedSize .Type.Key}}
						n += {{FixedSize .Type.Key}}
					{{else}}
						{{template "UnfixedSize" (NewTplType .K .Type.Key .N)}}
					{{end}}
					{{if .Elem.IsFixedSize}}
						n += {{.Elem.FixedSize}}
					{{else}}
						{{template "UnfixedSize" (NewTplType .V .Type.Elem .N)}}
					{{end}}
				}
		{{end}}
	{{else if .IsString}}
		n += 2 + len({{.Name}})
	{{else if .IsStruct}}
		n += {{.Name}}.BinarySize()
	{{end}}
{{end}}

{{define "Marshal"}}
	{{if .IsArray}}
		for {{.I}} := 0; {{.I}} < {{.Type.Len}}; {{.I}}++ {
			{{template "Marshal" .Elem}}
		}
	{{else if .IsSlice}}
		w.WriteUint16{{ByteOrder}}(uint16(len({{.Name}})))
		for {{.I}} := 0; {{.I}} < len({{.Name}}); {{.I}}++ {
			{{template "Marshal" .Elem}}
		}
	{{else if .IsPtr}}
		if {{.Name}} == nil {
			w.WriteUint8(0);
		} else {
			w.WriteUint8(1);
			{{template "Marshal" .Elem}}
		}
	{{else if .IsMap}}
		w.WriteUint16{{ByteOrder}}(uint16(len({{.Name}})))
		for {{.K}}, {{.V}} := range {{.Name}} {
			{{template "Marshal" (NewTplType .K .Type.Key .N)}}
			{{template "Marshal" (NewTplType .V .Type.Elem .N)}}
		}
	{{else}}
		{{MarshalField .}}
	{{end}}
{{end}}

{{define "Unmarshal"}}
    {{if .IsBytes}}
		{{if .IsArray}}
            io.ReadFull(r, {{.Name}}[:])
        {{else}}
			{{if .Colon}}
			var {{.Name}} []{{TypeName .Type.Elem}}
			{{end}}
            {{.Name}} = []{{(TypeName .Type.Elem)}}(r.ReadBytes(int(r.ReadUint16{{ByteOrder}}())))
        {{end}}
	{{else if .IsArray}}
		for {{.I}} := 0; {{.I}} < {{.Type.Len}}; {{.I}}++ {
			{{template "Unmarshal" .Elem}}
		}
	{{else if .IsSlice}}
		{{if .Colon}}
		var {{.Name}} []{{TypeName .Type.Elem}}
		{{end}}
		{
			n := int(r.ReadUint16{{ByteOrder}}())
			{{.Name}} = make([]{{(TypeName .Type.Elem)}}, n)
			for {{.I}} := 0; {{.I}} < n; {{.I}}++ {
				{{template "Unmarshal" .Elem}}
			}
		}
	{{else if .IsPtr}}
		{{if .Colon}}
		var {{.Name}} *{{TypeName .Type.Elem}}
		{{end}}
		if r.ReadUint8() == 1 {
			{{.Name}} = new({{(TypeName .Type.Elem)}})
			{{template "Unmarshal" .Elem}}
		}
	{{else if .IsMap}}
		{{if .Colon}}
		var {{.Name}} {{TypeName .Type}}
		{{end}}
		{
			n := int(r.ReadUint16{{ByteOrder}}())
			{{.Name}} = make({{TypeName .Type}}, n)
			for {{.I}} := 0; {{.I}} < n; {{.I}}++ {
				{{template "Unmarshal" (NewTplType2 .K .Type.Key .N)}}
				{{template "Unmarshal" (NewTplType2 .V .Type.Elem .N)}}
				{{.IndexName}} = {{.V}}
			}
		}
	{{else}}
		{{UnmarshalField .}}
	{{end}}
{{end}}
`
